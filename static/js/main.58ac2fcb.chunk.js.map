{"version":3,"sources":["components/section/section.module.scss","components/feedback-options/feedback-options.module.scss","components/statistics/statistics.module.scss","components/section/section.js","components/statistics/statistics.js","components/notification/notification.js","components/feedback-options/feedback-options.js","components/app/app.js","reportWebVitals.js","index.js"],"names":["module","exports","Section","title","children","className","s","section","Statistics","good","neutral","bad","total","positivePercentage","list","Notification","message","FeedbackOptions","options","onLeaveFeedback","Object","keys","map","key","button","type","name","onClick","FEEDBACK_TYPE","App","useState","setGood","setNeutral","setBad","Math","round","styles","app","event","target","prev","Error","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6IACAA,EAAOC,QAAU,CAAC,QAAU,2B,gBCA5BD,EAAOC,QAAU,CAAC,KAAO,+BAA+B,OAAS,mC,mCCAjED,EAAOC,QAAU,CAAC,KAAO,2B,8KCgBVC,EAdC,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,SACxB,OACE,0BAASC,UAAWC,IAAEC,QAAtB,UACGJ,GAAS,oBAAIE,UAAWC,IAAEH,MAAjB,SAAyBA,IAClCC,M,gBCgBQI,EApBI,SAAC,GAAuD,IAArDC,EAAoD,EAApDA,KAAMC,EAA8C,EAA9CA,QAASC,EAAqC,EAArCA,IAAKC,EAAgC,EAAhCA,MAAOC,EAAyB,EAAzBA,mBAC/C,OACE,qBAAIR,UAAWC,IAAEQ,KAAjB,UACE,wCAAWL,KACX,2CAAcC,KACd,uCAAUC,KACV,yCAAYC,EAAZ,OACA,qDAAwBC,EAAxB,W,gBCCSE,EARM,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACtB,OAAO,mBAAGX,UAAWC,IAAEU,QAAhB,SAA0BA,K,gBCkBpBC,EAnBS,SAAC,GAAkC,IAAhCC,EAA+B,EAA/BA,QAASC,EAAsB,EAAtBA,gBAClC,OACE,oBAAId,UAAWC,IAAEQ,KAAjB,SACGM,OAAOC,KAAKH,GAASI,KAAI,SAAAC,GAAG,OAC3B,6BACE,wBAAQlB,UAAWC,IAAEkB,OAAQC,KAAK,SAASC,KAAMH,EAAKI,QAASR,EAA/D,SACGI,KAFIA,SCAXK,EACE,OADFA,EAEK,UAFLA,EAGC,MAgDQC,EA7CH,WACV,MAAwBC,mBAAS,GAAjC,mBAAOrB,EAAP,KAAasB,EAAb,KACA,EAA8BD,mBAAS,GAAvC,mBAAOpB,EAAP,KAAgBsB,EAAhB,KACA,EAAsBF,mBAAS,GAA/B,mBAAOnB,EAAP,KAAYsB,EAAZ,KAiBMrB,EAAQH,EAAOC,EAAUC,EACzBE,EAAqBqB,KAAKC,MAAO,IAAM1B,EAAQG,EAAO,GAE5D,OACE,sBAAKP,UAAW+B,IAAOC,IAAvB,UACE,cAAC,EAAD,CAASlC,MAAM,wBAAf,SACE,cAAC,EAAD,CAAiBe,QAAS,CAAET,OAAMC,UAASC,OAAOQ,gBArBjC,SAAAmB,GACrB,IAAQZ,EAASY,EAAMC,OAAfb,KAER,OAAQA,GACN,KAAKE,EACH,OAAOG,GAAQ,SAAAS,GAAI,OAAIA,EAAO,KAChC,KAAKZ,EACH,OAAOI,GAAW,SAAAQ,GAAI,OAAIA,EAAO,KACnC,KAAKZ,EACH,OAAOK,GAAO,SAAAO,GAAI,OAAIA,EAAO,KAC/B,QACE,MAAM,IAAIC,MAAJ,qCAAwCf,UAYhD,cAAC,EAAD,CAASvB,MAAM,aAAf,SACGS,EAAQ,EACP,cAAC,EAAD,CACEH,KAAMA,EACNC,QAASA,EACTC,IAAKA,EACLC,MAAOA,EACPC,mBAAoBA,IAGtB,cAAC,EAAD,CAAcG,QAAQ,4BCvCjB0B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCAdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.58ac2fcb.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"section\":\"section_section__1fB8N\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"feedback-options_list__2dHMB\",\"button\":\"feedback-options_button__2lt3l\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"statistics_list__3qHJW\"};","import s from './section.module.scss';\nimport PropTypes from 'prop-types';\n\nconst Section = ({ title, children }) => {\n  return (\n    <section className={s.section}>\n      {title && <h2 className={s.title}>{title}</h2>}\n      {children}\n    </section>\n  );\n};\n\nSection.propTypes = {\n  title: PropTypes.string.isRequired,\n  children: PropTypes.node.isRequired,\n};\n\nexport default Section;\n","import s from './statistics.module.scss';\nimport PropTypes from 'prop-types';\n\nconst Statistics = ({ good, neutral, bad, total, positivePercentage }) => {\n  return (\n    <ul className={s.list}>\n      <li>Good: {good}</li>\n      <li>Neutral: {neutral}</li>\n      <li>Bad: {bad}</li>\n      <li>Total: {total} </li>\n      <li>Positive feedback: {positivePercentage}%</li>\n    </ul>\n  );\n};\n\nStatistics.propTypes = {\n  good: PropTypes.number.isRequired,\n  neutral: PropTypes.number.isRequired,\n  bad: PropTypes.number.isRequired,\n  total: PropTypes.number.isRequired,\n  positivePercentage: PropTypes.number.isRequired,\n};\n\nexport default Statistics;\n","import s from './notification.module.scss';\nimport PropTypes from 'prop-types';\n\nconst Notification = ({ message }) => {\n  return <p className={s.message}>{message}</p>;\n};\n\nNotification.propTypes = {\n  message: PropTypes.string.isRequired,\n};\n\nexport default Notification;\n","import s from './feedback-options.module.scss';\nimport PropTypes from 'prop-types';\n\nconst FeedbackOptions = ({ options, onLeaveFeedback }) => {\n  return (\n    <ul className={s.list}>\n      {Object.keys(options).map(key => (\n        <li key={key}>\n          <button className={s.button} type=\"button\" name={key} onClick={onLeaveFeedback}>\n            {key}\n          </button>\n        </li>\n      ))}\n    </ul>\n  );\n};\n\nFeedbackOptions.propTypes = {\n  options: PropTypes.object.isRequired,\n  onLeaveFeedback: PropTypes.func.isRequired,\n};\n\nexport default FeedbackOptions;\n","import { useState } from 'react';\nimport styles from './app.module.scss';\nimport Section from '../section';\nimport Statistics from '../statistics';\nimport Notification from '../notification';\nimport FeedbackOptions from '../feedback-options';\n\nconst FEEDBACK_TYPE = {\n  GOOD: 'good',\n  NEUTRAL: 'neutral',\n  BAD: 'bad',\n};\n\nconst App = () => {\n  const [good, setGood] = useState(0);\n  const [neutral, setNeutral] = useState(0);\n  const [bad, setBad] = useState(0);\n\n  const handleFeedback = event => {\n    const { name } = event.target;\n\n    switch (name) {\n      case FEEDBACK_TYPE.GOOD:\n        return setGood(prev => prev + 1);\n      case FEEDBACK_TYPE.NEUTRAL:\n        return setNeutral(prev => prev + 1);\n      case FEEDBACK_TYPE.BAD:\n        return setBad(prev => prev + 1);\n      default:\n        throw new Error(`Unsupported feedback type: ${name}`);\n    }\n  };\n\n  const total = good + neutral + bad;\n  const positivePercentage = Math.round((100 * good) / total, 0);\n\n  return (\n    <div className={styles.app}>\n      <Section title=\"Please leave feedback\">\n        <FeedbackOptions options={{ good, neutral, bad }} onLeaveFeedback={handleFeedback} />\n      </Section>\n      <Section title=\"Statistics\">\n        {total > 0 ? (\n          <Statistics\n            good={good}\n            neutral={neutral}\n            bad={bad}\n            total={total}\n            positivePercentage={positivePercentage}\n          />\n        ) : (\n          <Notification message=\"No feedback given\" />\n        )}\n      </Section>\n    </div>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'modern-normalize/modern-normalize.css';\nimport './index.scss';\nimport App from './components/app';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}